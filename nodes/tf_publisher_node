#!/usr/bin/env python
"""
This node loads a sensor poses config file, depending on the vehicle_type param.
There are default configs for the HippoCampus and BlueROV vehicle, however,
a seperat file for each HippoCampus robot should be added later on.

This node publishes tf data for:
Static:
- front_camera/camera_link (sensor position relative to base link, in FLU
    convention) + front camera frame (no translation relative to camera link,
    but rotation to camera frame convention, z forward, x right, y down)
- vertical_camera/camera_link and vertical_camera/camera_frame
- barometer_link (sensor position relative to base link, in FLU convention)
- ...
as defined in the sensor_poses config file. (currently hardcoded both here,
and in tfhelper)

Non-static:
- mavros/local_position/pose message is broadcasted as transform, too
    (mavros does not do this)

This node also takes care of necessary/useful coordinate transformations and
publishes the transformed data as PoseStamped/TwistStamped:
- ground truth:
    The twist ground truth provided by this plugin
    https://github.com/ros-simulation/gazebo_ros_pkgs/blob/melodic-devel/gazebo_plugins/src/gazebo_ros_p3d.cpp
    doesn't provide the twist data in the (ground truth) base_link frame,
    only in the map frame, which is not always practical.
    This node transforms the twist msg to the base_link_ground_truth frame
    and publishes it.
"""

import rospy
from geometry_msgs.msg import PoseStamped, TwistStamped, Quaternion, \
    TransformStamped, Vector3, PoseWithCovarianceStamped
from nav_msgs.msg import Odometry
import tf.transformations
import tf2_ros

from hippocampus_common.node import Node
from hippocampus_common.tf_helper import TfHelper
import math


class TfPublisherNode(Node):
    def __init__(self):
        super(TfPublisherNode, self).__init__("tf_publisher_node")

        self.static_broadcaster = tf2_ros.StaticTransformBroadcaster()
        self.tf_broadcaster = tf2_ros.TransformBroadcaster()
        vehicle_name = self.get_param("vehicle_name", "uuv00")
        self.tf_helper = TfHelper(vehicle_name)
        self.vehicle_type = self.get_param("vehicle_type")

        # HippoCampus only has one camera
        if self.vehicle_type == "hippocampus":
            self._vertical_camera_link_tf = None
            self._vertical_camera_frame_tf = None

        # BlueROV has a front and a vertical camera
        elif self.vehicle_type == "bluerov":
            self._front_camera_link_tf = None
            self._front_camera_frame_tf = None
            self._vertical_camera_link_tf = None
            self._vertical_camera_frame_tf = None

        else:
            rospy.logerr("[{}] Vehicle type defined does not exist.".format(
                rospy.get_name()))

        self._base_link_flu_to_frd_tf = None
        self._barometer_tf = None
        self._base_link_flu_to_frd_static_tf = None
        self._base_link_frd_to_flu_static_tf = None

        # Send all static transforms at init
        self.broadcast_static_tf()

        # publisher for ground truth twist transformation
        self.ground_truth_twist_pub = rospy.Publisher(
            "ground_truth/twist_body_frame", TwistStamped, queue_size=1)

        if self.vehicle_type == "hippocampus":
            rospy.Subscriber("mavros/local_position/pose",
                             PoseStamped,
                             self.pose_callback,
                             queue_size=1)
        elif self.vehicle_type == "bluerov":
            rospy.Subscriber("mavros/vision_pose/pose_cov",
                             PoseWithCovarianceStamped,
                             self.pose_cov_callback,
                             queue_size=1)

        rospy.Subscriber("ground_truth/state",
                         Odometry,
                         self.ground_truth_odom_callback,
                         queue_size=1)

    def pose_cov_callback(self, pose_msg):
        msg = PoseStamped()
        msg.header = pose_msg.header
        msg.pose = pose_msg.pose.pose
        self.broadcast_base_link_tf(msg)

    def pose_callback(self, pose_msg):
        # broadcast the pose as a transform:
        self.broadcast_base_link_tf(pose_msg)

    def ground_truth_odom_callback(self, odom_msg):
        # 1) broadcast the ground truth pose as a transform:
        self.broadcast_base_link_ground_truth_tf(odom_msg)

        # 2) publish the ground truth twist transformed to vehicle frame as a
        self.publish_twist_body_frame(odom_msg)

    def broadcast_static_tf(self):

        base_flu_to_frd = self.tf_helper.get_base_link_flu_to_frd_tf()
        vertical_camera_link = self.get_vertical_camera_link_transform()
        vertical_camera_frame = self.get_vertical_camera_frame_transform()
        baro = self.get_barometer_transform()
        transforms_to_broadcast = [
            base_flu_to_frd, vertical_camera_link, vertical_camera_frame, baro
        ]

        if self.vehicle_type == "bluerov":
            front_camera_link = self.get_front_camera_link_transform()
            front_camera_frame = self.get_front_camera_frame_transform()

            transforms_to_broadcast.extend(
                [front_camera_link, front_camera_frame])

        self.static_broadcaster.sendTransform(transforms_to_broadcast)

    def broadcast_base_link_tf(self, pose):
        transform = TransformStamped()
        transform.transform.translation = pose.pose.position
        transform.transform.rotation = pose.pose.orientation
        transform.header = pose.header
        transform.child_frame_id = self.tf_helper.get_base_link_id()

        self.tf_broadcaster.sendTransform(transform)

    def broadcast_base_link_ground_truth_tf(self, odom_msg):
        transform = TransformStamped()
        transform.transform.translation = odom_msg.pose.pose.position
        transform.transform.rotation = odom_msg.pose.pose.orientation
        transform.header = odom_msg.header
        transform.child_frame_id = \
            self.tf_helper.get_base_link_ground_truth_id()

        self.tf_broadcaster.sendTransform(transform)

    def publish_twist_body_frame(self, odom_msg):
        # TwistStamped msg
        twist_map = TwistStamped()
        twist_map.twist = odom_msg.twist.twist
        # transform twist to body frame
        twist = self.tf_helper.twist_ground_truth_map_to_body_frame(twist_map)
        # fill out pose header stamp with same time as odom_msg
        twist.header.stamp = odom_msg.header.stamp
        # add correct frame id
        twist.header.frame_id = self.tf_helper.get_base_link_ground_truth_id()

        # publish the message of the transformed twist
        self.ground_truth_twist_pub.publish(twist)

    def get_vertical_camera_link_transform(self):
        if not self._vertical_camera_link_tf:
            self._vertical_camera_link_tf = \
                self._get_vertical_camera_link_transform()
        return self._vertical_camera_link_tf

    def _get_vertical_camera_link_transform(self):
        # read the pose from the parameter server
        pos_x = Node.get_param("~vertical_camera/x", 0.0)
        pos_y = Node.get_param("~vertical_camera/y", 0.0)
        pos_z = Node.get_param("~vertical_camera/z", 0.0)
        roll = Node.get_param("~vertical_camera/roll", 0.0)
        pitch = Node.get_param("~vertical_camera/pitch", 0.0)
        yaw = Node.get_param("~vertical_camera/yaw", 0.0)

        # create a transform message that will be returned by this function
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.tf_helper.get_base_link_id()
        transform.child_frame_id = self.tf_helper.get_vertical_camera_link_id()

        transform.transform.translation = Vector3(x=pos_x, y=pos_y, z=pos_z)

        quat = tf.transformations.quaternion_from_euler(roll, pitch, yaw)

        transform.transform.rotation = Quaternion(x=quat[0],
                                                  y=quat[1],
                                                  z=quat[2],
                                                  w=quat[3])
        return transform

    def _get_vertical_camera_frame_transform(self):
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.tf_helper.get_vertical_camera_link_id()
        transform.child_frame_id = self.tf_helper.get_vertical_camera_frame_id()

        quat = tf.transformations.quaternion_from_euler(-math.pi / 2.0, 0,
                                                        -math.pi / 2.0)

        transform.transform.rotation = Quaternion(x=quat[0],
                                                  y=quat[1],
                                                  z=quat[2],
                                                  w=quat[3])
        return transform

    def get_vertical_camera_frame_transform(self):
        if not self._vertical_camera_frame_tf:
            self._vertical_camera_frame_tf = \
                self._get_vertical_camera_frame_transform()
        return self._vertical_camera_frame_tf

    def get_front_camera_link_transform(self):
        if not self._front_camera_link_tf:
            self._front_camera_link_tf = \
                self._get_front_camera_link_transform()
        return self._front_camera_link_tf

    def _get_front_camera_link_transform(self):
        # read the pose from the parameter server
        pos_x = Node.get_param("~front_camera/x", 0.0)
        pos_y = Node.get_param("~front_camera/y", 0.0)
        pos_z = Node.get_param("~front_camera/z", 0.0)
        roll = Node.get_param("~front_camera/roll", 0.0)
        pitch = Node.get_param("~front_camera/pitch", 0.0)
        yaw = Node.get_param("~front_camera/yaw", 0.0)

        # create a transform message that will be returned by this function
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.tf_helper.get_base_link_id()
        transform.child_frame_id = self.tf_helper.get_front_camera_link_id()

        transform.transform.translation = Vector3(x=pos_x, y=pos_y, z=pos_z)

        quat = tf.transformations.quaternion_from_euler(roll, pitch, yaw)

        transform.transform.rotation = Quaternion(x=quat[0],
                                                  y=quat[1],
                                                  z=quat[2],
                                                  w=quat[3])
        return transform

    def _get_front_camera_frame_transform(self):
        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.tf_helper.get_front_camera_link_id()
        transform.child_frame_id = self.tf_helper.get_front_camera_frame_id()

        quat = tf.transformations.quaternion_from_euler(-math.pi / 2.0, 0,
                                                        -math.pi / 2.0)

        transform.transform.rotation = Quaternion(x=quat[0],
                                                  y=quat[1],
                                                  z=quat[2],
                                                  w=quat[3])
        return transform

    def get_front_camera_frame_transform(self):
        if not self._front_camera_frame_tf:
            self._front_camera_frame_tf = \
                self._get_front_camera_frame_transform()
        return self._front_camera_frame_tf

    def _get_barometer_transform(self):

        pos_x = Node.get_param("~barometer/x", 0.0)
        pos_y = Node.get_param("~barometer/y", 0.0)
        pos_z = Node.get_param("~barometer/z", 0.0)

        transform = TransformStamped()
        transform.header.stamp = rospy.Time.now()
        transform.header.frame_id = self.tf_helper.get_base_link_id()
        transform.child_frame_id = self.tf_helper.get_barometer_link_id()

        transform.transform.translation = Vector3(x=pos_x, y=pos_y, z=pos_z)
        quat = tf.transformations.quaternion_from_euler(0, 0, 0)
        transform.transform.rotation = Quaternion(x=quat[0],
                                                  y=quat[1],
                                                  z=quat[2],
                                                  w=quat[3])
        return transform

    def get_barometer_transform(self):
        if not self._barometer_tf:
            self._barometer_tf = self._get_barometer_transform()
        return self._barometer_tf


def main():
    node = TfPublisherNode()
    node.run()


if __name__ == "__main__":
    main()
