#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Implementation of a ROS-node that subscribes to a pose message topic and
converts them to px4's NED frame and publishes them.
"""

import rospy
from geometry_msgs.msg import PoseStamped
import tf2_ros
import tf2_geometry_msgs

from hippocampus_common import node


class TfNode(node.Node):
    """This node subscribes to a pose topic in gazebo's ENU frame and publishes
    this pose in px4's NED frame.
    """
    def __init__(self):
        super(TfNode, self).__init__("tf_pose_to_ned_node")

        self.tf_buffer = tf2_ros.Buffer(rospy.Duration(10))
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.pose_publisher = rospy.Publisher("pose_ned",
                                              PoseStamped,
                                              queue_size=1)

        rospy.Subscriber("mavros/local_position/pose",
                         PoseStamped,
                         self.pose_callback,
                         queue_size=1)

    def pose_callback(self, pose_msg):
        """Transforms incoming pose messages to the 'map_ned' frame.

        The input pose can be in an arbitrary frame as long as there is the
        necessary tf information published how to transform the pose from the
        source frame to the 'map_ned' frame. Usually the input pose is expressed
        in the 'map' frame.

        Args:
            pose_msg (PoseStamped): The pose that shall be transformed to the
                'map_ned' frame.
        """

        # lookup the latest transformation info
        transform = self.tf_buffer.lookup_transform(
            target_frame="map_ned",
            source_frame=pose_msg.header.frame_id,
            time=rospy.Time(0),
            timeout=rospy.Duration(1))

        # transform the pose
        pose_msg = tf2_geometry_msgs.do_transform_pose(pose_msg, transform)

        # publish the message of the transformed pose.
        self.pose_publisher.publish(pose_msg)


def main():
    """Entrypoint of this script.
    """
    ros_node = TfNode()
    ros_node.run()


if __name__ == "__main__":
    main()
