#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Implementation of a ROS-node that subscribes to pose messages in gazebo's
ENU frame, converts them to px4's NED frame and publishes them.
"""

import rospy
from geometry_msgs.msg import PoseStamped
from pyquaternion import Quaternion

from hippocampus_common import ftf
from hippocampus_common import node


class TfNode(node.Node):
    """This node subscribes to a pose topic in gazebo's ENU frame and publishes
    this pose in px4's NED frame.
    """
    def __init__(self):
        super(TfNode, self).__init__("tf_enu_to_ned_node")

        self.pose_publisher = rospy.Publisher("pose_ned",
                                              PoseStamped,
                                              queue_size=1)

        rospy.Subscriber("mavros/local_position/pose",
                         PoseStamped,
                         self.pose_callback,
                         queue_size=1)

    def pose_callback(self, pose_gazebo):
        """Handles incoming pose messages.

        Args:
            pose_gazebo (PoseStamped): ROS pose message with time stamp.
        """
        pose_px4 = PoseStamped()
        pose_px4.header = pose_gazebo.header
        pose_px4.header.frame_id = "map_ned"

        # transform the position
        position = ftf.position_gazebo_to_px4(pose_gazebo.pose.position.x,
                                              pose_gazebo.pose.position.y,
                                              pose_gazebo.pose.position.z)
        pose_px4.pose.position.x = position[0]
        pose_px4.pose.position.y = position[1]
        pose_px4.pose.position.z = position[2]

        # transform the orientation
        orientation_gazebo = Quaternion(w=pose_gazebo.pose.orientation.w,
                                        x=pose_gazebo.pose.orientation.x,
                                        y=pose_gazebo.pose.orientation.y,
                                        z=pose_gazebo.pose.orientation.z)

        orientation_px4 = ftf.orientation_gazebo_to_px4(orientation_gazebo)
        pose_px4.pose.orientation.w = orientation_px4.w
        pose_px4.pose.orientation.x = orientation_px4.x
        pose_px4.pose.orientation.y = orientation_px4.y
        pose_px4.pose.orientation.z = orientation_px4.z

        # publish the message of the transformed pose.
        self.pose_publisher.publish(pose_px4)


def main():
    """Entrypoint of this node script.
    """
    node = TfNode()
    node.run()


if __name__ == "__main__":
    main()
