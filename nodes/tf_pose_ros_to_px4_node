#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Implementation of a ROS-node that subscribes to a pose message topic and
converts them to px4's NED frame and publishes them.
"""

import rospy
from geometry_msgs.msg import PoseStamped
import tf2_geometry_msgs
from hippocampus_common.tf_helper import TfHelper

from hippocampus_common import node


class TfNode(node.Node):
    """This node subscribes to a pose topic in gazebo's ENU frame and publishes
    this pose in px4's NED frame.
    """
    def __init__(self):
        super(TfNode, self).__init__("tf_pose_to_ned_node")

        self.tf_helper = TfHelper()

        self.pose_publisher = rospy.Publisher("pose_px4",
                                              PoseStamped,
                                              queue_size=1)

        rospy.Subscriber("mavros/local_position/pose",
                         PoseStamped,
                         self.pose_callback,
                         queue_size=1)

    def pose_callback(self, pose_msg):
        # switch from ros body frame convention to px4 body frame convention
        pose = self.tf_helper.pose_flu_to_frd(pose_msg)
        # switch from ros world frame convention to px4 world frame convetion
        transform = self.tf_helper.tf_buffer.lookup_transform(
            target_frame="map_ned",
            source_frame=pose.header.frame_id,
            time=rospy.Time(0),
            timeout=rospy.Duration(1))

        # transform the pose
        pose = tf2_geometry_msgs.do_transform_pose(pose, transform)

        # publish the message of the transformed pose.
        self.pose_publisher.publish(pose)


def main():
    """Entrypoint of this script.
    """
    ros_node = TfNode()
    ros_node.run()


if __name__ == "__main__":
    main()
